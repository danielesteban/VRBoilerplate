{"version":3,"sources":["webpack:///./src/sounds/sea.ogg","webpack:///./src/sounds/train.ogg","webpack:///./src/sounds/dark.ogg","webpack:///./src/textures/voxels.png","webpack:///./src/meshes/ball.js","webpack:///./src/meshes/hut.js","webpack:///./src/meshes/plant.js","webpack:///./src/meshes/sign.js","webpack:///./src/meshes/track.js","webpack:///./src/meshes/train.js","webpack:///./src/meshes/tree.js","webpack:///./src/meshes/walls.js","webpack:///./src/scenes/menu.js","webpack:///./src/scenes/level1.js","webpack:///./src/scenes/index.js","webpack:///./src/scenes/level2.js","webpack:///./src/index.js","webpack:///./src/sounds/music.ogg"],"names":["module","exports","__webpack_require__","p","Ball","_ref","_this","listener","color","_ref$radius","radius","position","_classCallCheck","this","geometry","SphereGeometry","faces","forEach","face","i","offsetHSL","Math","random","copy","_possibleConstructorReturn","_getPrototypeOf","call","BufferGeometry","fromGeometry","MeshBasicMaterial","vertexColors","VertexColors","audio","PositionalAudio","setLoop","setRefDistance","AudioLoader","load","Music","buffer","setBuffer","add","set","x","y","z","isActive","Mesh","_ref2$animation","_ref2","animation","delta","time","s","sin","scale","rotateY","isPrimary","_ref3","material","isPlaying","stop","dispose","_isActive","value","setHex","play","Hut","_ref$size","arguments","length","undefined","size","hut_classCallCheck","aux","Vector3","center","hut_getPrototypeOf","generator","dome","distanceTo","light","floor","Floor","width","height","visible","intersects","hut_assertThisInitialized","Voxels","Plant","plant_classCallCheck","map","Uint32Array","voxel","direction","Color","v","normalize","setHSL","round","r","g","b","addScaledVector","plant_possibleConstructorReturn","plant_getPrototypeOf","Sign","ui","sign_classCallCheck","supportGeometry","BoxGeometry","translate","supportMaterial","sign_possibleConstructorReturn","sign_getPrototypeOf","panel","UI","support","Object3D","Track","track_classCallCheck","left","right","track_possibleConstructorReturn","track_getPrototypeOf","Train","train_classCallCheck","train_getPrototypeOf","ceil","train_assertThisInitialized","Tree","tree_classCallCheck","leaves","trunk","colors","tree_possibleConstructorReturn","tree_getPrototypeOf","Walls","walls_classCallCheck","walls_possibleConstructorReturn","walls_getPrototypeOf","bump","multiply","Menu","args","_this$intersects","_this$intersects2","menu_classCallCheck","menu_possibleConstructorReturn","menu_getPrototypeOf","engine","setAmbientSounds","Ambient","setBackgroundColor","origin","sqrt","ground","Heightmap","_toConsumableArray","Array","d","cos","maxDepth","push","water","Water","animations","onAnimationTick","stars","Starfield","hut","apply","tree","multiplyScalar","getFloorY","plant","birds","Birds","display","textureWidth","textureHeight","labels","font","text","__TITLE__","concat","__VERSION__","styles","background","lookAt","sign","buttons","label","onPointer","router","goTo","graphics","ctx","strokeStyle","beginPath","moveTo","lineTo","stroke","button","Scene","Level1","level1_classCallCheck","level1_possibleConstructorReturn","level1_getPrototypeOf","DarkAmbient","walls","ball","voxelsContainer","texture","TextureLoader","VoxelsTexture","repeat","magFilter","NearestFilter","minFilter","voxelsTexture","voxels","rotation","order","PI","onBeforeRender","_ref4","l","fillStyle","arc","fill","level1_toConsumableArray","_get","prototype","scenes","path","scene","Level2","level2_classCallCheck","level2_possibleConstructorReturn","level2_getPrototypeOf","file","TrainAmbient","volume","train","level2_toConsumableArray","heightmaps","mesh","track","step","VREngine","basename","__BASENAME__","mount","document","getElementById"],"mappings":"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","file":"code/main.4077064b73aa51eb5cbd.js","sourcesContent":["module.exports = __webpack_public_path__ + \"assets/317196d78e7cd7290f35d6f2b8dfdb02.ogg\";","module.exports = __webpack_public_path__ + \"assets/05ec545d1518a4700cd81781da93ccb7.ogg\";","module.exports = __webpack_public_path__ + \"assets/4ba312eae62dae3b218b93b9b0ed4b21.ogg\";","module.exports = __webpack_public_path__ + \"assets/530f99ff3b4f07ac8e92223219b9de55.png\";","import {\n  AudioLoader,\n  BufferGeometry,\n  Mesh,\n  MeshBasicMaterial,\n  PositionalAudio,\n  SphereGeometry,\n  VertexColors,\n} from 'three';\nimport Music from '@/sounds/music.ogg';\n\nclass Ball extends Mesh {\n  constructor({\n    listener,\n    color,\n    radius = 0.5,\n    position,\n  }) {\n    const geometry = new SphereGeometry(radius, 32, 32);\n    geometry.faces.forEach((face, i) => {\n      if (i % 2 === 1) {\n        face.color.offsetHSL(0, 0, Math.random() * -0.05);\n        geometry.faces[i - 1].color.copy(face.color);\n      }\n    });\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshBasicMaterial({\n        color,\n        vertexColors: VertexColors,\n      })\n    );\n    this.audio = new PositionalAudio(listener);\n    this.audio.setLoop(true);\n    this.audio.setRefDistance(0.5);\n    const audioLoader = new AudioLoader();\n    audioLoader.load(Music, (buffer) => {\n      this.audio.setBuffer(buffer);\n    });\n    this.add(this.audio);\n    this.position.set(position.x, position.y, position.z);\n    this.isActive = false;\n  }\n\n  get isActive() {\n    return this._isActive || false;\n  }\n\n  set isActive(value) {\n    const {\n      audio,\n      material,\n      scale,\n    } = this;\n    this._isActive = value;\n    scale.set(1, 1, 1);\n    material.color.setHex(value ? 0xffffff : 0x333333);\n    if (value) {\n      audio.play();\n    } else if (audio.isPlaying) {\n      audio.stop();\n    }\n  }\n\n  onBeforeRender({ animation: { delta, time } }) {\n    const { isActive } = this;\n    if (!isActive) {\n      return;\n    }\n    const s = 1 + (Math.sin(time * 12) * 0.05);\n    this.scale.set(s, s, s);\n    this.rotateY(delta);\n  }\n\n  onPointer({ isPrimary }) {\n    const { isActive } = this;\n    if (isPrimary) {\n      this.isActive = !isActive;\n    }\n  }\n\n  dispose() {\n    const { audio, geometry, material } = this;\n    if (audio.isPlaying) {\n      audio.stop();\n    }\n    geometry.dispose();\n    material.dispose();\n  }\n}\n\nexport default Ball;\n","import { Vector3 } from 'three';\nimport { Floor, Voxels } from 'vrengine';\n\nclass Hut extends Voxels {\n  constructor({\n    size = 12,\n  } = {}) {\n    const radius = size * 0.5;\n    const aux = new Vector3();\n    const center = new Vector3(radius - 0.5, radius * 0.75, radius - 0.5);\n    super({\n      generator: ({ x, y, z }) => {\n        const dome = aux.set(x, y, z).distanceTo(center);\n        if (\n          (\n            y < radius\n            && (\n              (\n                y === 0\n                || (\n                  (x === 0 || x === size - 1)\n                  && ((z !== radius && z !== radius - 1) || y > radius * 0.5)\n                )\n                || ((z === 0 || z === size - 1) && y !== radius * 0.5 && y !== radius * 0.5 - 1)\n              )\n            )\n          )\n          || (\n            y >= radius - 1\n            && dome > radius * 0.75\n            && dome < radius * 0.9\n          )\n        ) {\n          const light = Math.random() * 0x88;\n          return (\n            (0x01 << 24)\n            | ((light & 0xFF) << 16)\n            | ((light & 0xFF) << 8)\n            | (light & 0xFF)\n          );\n        }\n        return 0x00;\n      },\n      size,\n    });\n    this.position.set(-radius, -1, -radius);\n    const floor = new Floor({\n      width: size,\n      height: size,\n    });\n    floor.material.visible = false;\n    floor.position.set(radius, 1.001, radius);\n    this.add(floor);\n    this.intersects = [this, floor];\n  }\n}\n\nexport default Hut;\n","import { Color, Vector3 } from 'three';\nimport { Voxels } from 'vrengine';\n\nclass Plant extends Voxels {\n  constructor() {\n    const size = 32;\n    const radius = size * 0.5;\n    const map = new Uint32Array(size * size * size);\n    const count = 64;\n    const voxel = new Vector3();\n    const direction = new Vector3();\n    const color = new Color();\n    for (let v = 0; v < count; v += 1) {\n      voxel.set(\n        radius - 5 + (Math.random() * 11),\n        0,\n        radius - 5 + (Math.random() * 11)\n      );\n      direction.set(\n        Math.random() * 2 - 1,\n        Math.random() * 0.5 + 0.25,\n        Math.random() * 2 - 1\n      ).normalize();\n      color.setHSL(\n        0.3 + Math.random() * 0.1,\n        0.8 - Math.random() * 0.4,\n        0.4 - Math.random() * 0.2\n      );\n      while (true) { // eslint-disable-line no-constant-condition\n        let { x, y, z } = voxel;\n        x = Math.round(x);\n        y = Math.round(y);\n        z = Math.round(z);\n        if (\n          x < size * 0.2\n          || x >= size * 0.8\n          || y < 0\n          || y > size - 1\n          || z < size * 0.2\n          || z >= size * 0.8\n        ) {\n          break;\n        }\n        const index = z * size * size + y * size + x;\n        map[index] = (\n          (0x01 << 24)\n          | (((color.r * 0xFF) & 0xFF) << 16)\n          | (((color.g * 0xFF) & 0xFF) << 8)\n          | ((color.b * 0xFF) & 0xFF)\n        );\n        voxel.addScaledVector(direction, 0.5);\n      }\n    }\n    super({\n      map,\n      size,\n    });\n    this.scale.set(0.02, 0.04, 0.02);\n    this.position.set(radius * -this.scale.x, 0, radius * -this.scale.z);\n  }\n}\n\nexport default Plant;\n","import {\n  BoxGeometry,\n  BufferGeometry,\n  Mesh,\n  MeshBasicMaterial,\n  Object3D,\n  VertexColors,\n} from 'three';\nimport { UI } from 'vrengine';\n\nclass Sign extends Object3D {\n  constructor(ui) {\n    if (!Sign.supportGeometry) {\n      const geometry = new BoxGeometry(0.1, 2, 0.05, 1, 1, 1);\n      geometry.faces.forEach((face, i) => {\n        if (i % 2 === 1) {\n          face.color.offsetHSL(0, 0, Math.random() * -0.1);\n          geometry.faces[i - 1].color.copy(face.color);\n        }\n      });\n      geometry.translate(0, 0.3, 0);\n      Sign.supportGeometry = (new BufferGeometry()).fromGeometry(geometry);\n    }\n    if (!Sign.supportMaterial) {\n      Sign.supportMaterial = new MeshBasicMaterial({\n        color: 0x333333,\n        vertexColors: VertexColors,\n      });\n    }\n    super();\n    const panel = new UI(ui);\n    panel.position.y += 1.48;\n    const support = new Mesh(\n      Sign.supportGeometry,\n      Sign.supportMaterial\n    );\n    this.add(panel);\n    this.add(support);\n    this.intersects = [panel, support];\n  }\n}\n\nexport default Sign;\n","import { Voxels } from 'vrengine';\n\nclass Track extends Voxels {\n  constructor({\n    size = 16,\n  } = {}) {\n    const radius = size * 0.5;\n    const left = radius - 3;\n    const right = radius + 2;\n    super({\n      color: 0xAAAAAA,\n      generator: ({ x, y, z }) => {\n        if (\n          (\n            y === size - 1\n            && x >= left\n            && x <= right\n            && (\n              x === left\n              || x === right\n              || z % 4 === 0\n            )\n          )\n          || (\n            z % 8 === 0\n            && (\n              x === left\n              || x === right\n            )\n          )\n        ) {\n          const light = Math.random() * 0xAA;\n          return (\n            (0x01 << 24)\n            | ((light & 0xFF) << 16)\n            | ((light & 0xFF) << 8)\n            | (light & 0xFF)\n          );\n        }\n        return 0x00;\n      },\n      size,\n    });\n    this.scale.set(2, 0.5, 127 / size);\n    this.position.set(radius * -this.scale.x, size * -this.scale.y, radius * -this.scale.z);\n  }\n}\n\nexport default Track;\n","import { Floor, Voxels } from 'vrengine';\n\nclass Train extends Voxels {\n  constructor({\n    size = 16,\n  } = {}) {\n    const radius = size * 0.5;\n    super({\n      color: 0x995533,\n      generator: ({ x, y, z }) => {\n        if (\n          x >= Math.ceil(size * 0.2)\n          && x < Math.floor(size * 0.8)\n          && y <= Math.ceil(size * 0.2)\n          && (\n            y === 0\n            || y === Math.ceil(size * 0.2)\n            || (\n              (\n                z === 0\n                || z === size - 1\n              )\n              && (\n                y === 1\n                || x === Math.ceil(size * 0.2)\n                || x === Math.floor(size * 0.8) - 1\n              )\n            )\n            || (\n              (\n                x === Math.ceil(size * 0.2)\n                || x === Math.floor(size * 0.8) - 1\n              )\n              && y === 1\n            )\n          )\n        ) {\n          const light = Math.random() * 0x88;\n          return (\n            (0x01 << 24)\n            | ((light & 0xFF) << 16)\n            | ((light & 0xFF) << 8)\n            | (light & 0xFF)\n          );\n        }\n        return 0x00;\n      },\n      size,\n    });\n    this.position.set(radius * -1, -1, radius * -1);\n    const floor = new Floor({\n      width: size * 0.5 - 2,\n      height: size - 2,\n    });\n    floor.material.visible = false;\n    floor.position.set(radius, 1.001, radius);\n    this.add(floor);\n    this.intersects = [this, floor];\n  }\n}\n\nexport default Train;\n","import { Color, Vector3 } from 'three';\nimport { Voxels } from 'vrengine';\n\nclass Tree extends Voxels {\n  constructor() {\n    const leaves = Math.floor(Math.random() * 3 + 3);\n    const trunk = Math.floor(Math.random() * 5 + leaves * 2);\n    const size = trunk + leaves;\n    const radius = size * 0.5;\n    const aux = new Vector3();\n    const center = new Vector3(radius + 0.5, trunk, radius + 0.5);\n    const colors = {\n      trunk: new Color().setHSL(Math.random(), 0.4, 0.4),\n      leaves: new Color().setHSL(Math.random(), 0.6, 0.6),\n    };\n    const color = new Color();\n    super({\n      generator: ({ x, y, z }) => {\n        if (\n          y <= trunk\n          && x >= radius && x <= radius + 1\n          && z >= radius && z <= radius + 1\n        ) {\n          color\n            .copy(colors.trunk)\n            .offsetHSL(\n              Math.random() * 0.2 - 0.2,\n              Math.random() * 0.2 - 0.2,\n              Math.random() * 0.2 - 0.2\n            );\n          return (\n            (0x01 << 24)\n            | (((color.r * 0xFF) & 0xFF) << 16)\n            | (((color.g * 0xFF) & 0xFF) << 8)\n            | ((color.b * 0xFF) & 0xFF)\n          );\n        }\n        if (\n          aux.set(x, y, z).distanceTo(center) <= leaves\n        ) {\n          color\n            .copy(colors.leaves)\n            .offsetHSL(\n              Math.random() * 0.2 - 0.2,\n              Math.random() * 0.2 - 0.2,\n              Math.random() * 0.2 - 0.2\n            );\n          return (\n            (0x01 << 24)\n            | (((color.r * 0xFF) & 0xFF) << 16)\n            | (((color.g * 0xFF) & 0xFF) << 8)\n            | ((color.b * 0xFF) & 0xFF)\n          );\n        }\n        return 0x00;\n      },\n      size,\n    });\n    this.position.set(-radius, 0, -radius);\n  }\n}\n\nexport default Tree;\n","import { Color } from 'three';\nimport { Voxels } from 'vrengine';\n\nclass Walls extends Voxels {\n  constructor() {\n    const size = 32;\n    const radius = size * 0.5;\n    const color = new Color();\n    super({\n      generator: ({ x, y, z }) => {\n        const bump = Math.random() >= 0.5;\n        if (\n          x === 0\n          || (x === 1 && bump)\n          || x === size - 1\n          || (x === size - 2 && bump)\n          || z === 0\n          || (z === 1 && bump)\n          || z === size - 1\n          || (z === size - 2 && bump)\n          || y === size - 1\n        ) {\n          color\n            .setHex(0x333333)\n            .offsetHSL(\n              Math.random() * 0.2 - 0.2,\n              Math.random() * 0.2 - 0.2,\n              Math.random() * 0.2 - 0.2\n            );\n          return (\n            (0x01 << 24)\n            | (((color.r * 0xFF) & 0xFF) << 16)\n            | (((color.g * 0xFF) & 0xFF) << 8)\n            | ((color.b * 0xFF) & 0xFF)\n          );\n        }\n        return 0x00;\n      },\n      size,\n    });\n    this.scale.set(5, 10, 5);\n    this.position.set(-radius, -radius, -radius).multiply(this.scale);\n  }\n}\n\nexport default Walls;\n","import { Vector3 } from 'three';\nimport {\n  Scene,\n  Birds,\n  Heightmap,\n  Starfield,\n  UI,\n  Water,\n} from 'vrengine';\nimport {\n  Hut,\n  Plant,\n  Sign,\n  Tree,\n} from '@/meshes';\nimport Ambient from '@/sounds/sea.ogg';\n\nclass Menu extends Scene {\n  constructor(args) {\n    super(args);\n    const { engine } = args;\n    const aux = new Vector3();\n\n    engine.setAmbientSounds([Ambient]);\n    engine.setBackgroundColor(0x333366);\n\n    // Spawn a heightmap\n    const origin = new Vector3(63.5, 0, 63.5);\n    const radius = Math.sqrt(64 * 64 + 64 * 64);\n    const ground = new Heightmap({\n      color: 0x335522,\n      map: [...Array(128)].map((v, z) => ([...Array(128)].map((v, x) => {\n        const d = aux.set(x, 0, z).distanceTo(origin);\n        return (\n          Math.random() * 0.5\n          + (Math.cos(x * 0.25) + Math.sin(z * 0.5)) * (1 / 3)\n          + (radius - (d * 0.1))\n        );\n      }))),\n    });\n    ground.position.y -= ground.maxDepth;\n    this.add(ground);\n    this.intersects.push(ground);\n\n    // Spawn some water chunks\n    const water = new Water();\n    water.position.set(0, -5.75, 0);\n    this.add(water);\n    this.animations.push(Water.onAnimationTick);\n\n    // Spawn a starfield\n    const stars = new Starfield();\n    this.add(stars);\n\n    // Spawn a voxel hut\n    const hut = new Hut({\n      size: 12,\n    });\n    this.add(hut);\n    this.intersects.push(...hut.intersects);\n\n    // Spawn some voxel trees\n    for (let i = 0; i < 32; i += 1) {\n      const tree = new Tree();\n      tree.position.add(\n        aux\n          .set(\n            Math.random() * 2 - 1,\n            0,\n            Math.random() * 2 - 1\n          )\n          .normalize()\n          .multiplyScalar(16 + Math.random() * 32)\n      );\n      tree.position.y = ground.getFloorY({ x: aux.x, z: aux.z }) - 0.5;\n      this.add(tree);\n      this.intersects.push(tree);\n    }\n\n    // Spawn some voxel plants\n    for (let i = 0; i < 32; i += 1) {\n      const plant = new Plant();\n      plant.position.add(\n        aux\n          .set(\n            Math.random() * 2 - 1,\n            0,\n            Math.random() * 2 - 1\n          )\n          .normalize()\n          .multiplyScalar(16 + Math.random() * 40)\n      );\n      plant.position.y = ground.getFloorY({ x: aux.x, z: aux.z }) - 0.05;\n      this.add(plant);\n      this.intersects.push(plant);\n    }\n\n    // Spawn some birds\n    const birds = new Birds();\n    birds.origin.set(0, -16, 0);\n    this.add(birds);\n    this.animations.push(birds.onAnimationTick);\n\n    // Spawn a UI display\n    const display = new UI({\n      width: 1,\n      height: 1,\n      textureWidth: 512,\n      textureHeight: 512,\n      labels: [\n        {\n          font: '700 60px monospace',\n          text: __TITLE__,\n          x: 256,\n          y: 220,\n        },\n        {\n          font: '700 40px monospace',\n          text: `v${__VERSION__}`,\n          x: 256,\n          y: 280,\n        },\n      ],\n      styles: {\n        background: 'rgba(0, 0, 0, 0)',\n      },\n    });\n    display.position.set(0, 2.5, -2.4);\n    display.lookAt(0, 1, 0);\n    this.add(display);\n\n    // Spawn a sign\n    const sign = new Sign({\n      buttons: [\n        {\n          label: 'Level 01',\n          x: 128 - 100,\n          y: 140 - 25,\n          width: 200,\n          height: 50,\n          onPointer: ({ isPrimary }) => {\n            if (isPrimary) engine.router.goTo('/play');\n          },\n        },\n        {\n          label: 'Level 02',\n          x: 128 - 100,\n          y: 200 - 25,\n          width: 200,\n          height: 50,\n          onPointer: ({ isPrimary }) => {\n            if (isPrimary) engine.router.goTo('/play/2');\n          },\n        },\n      ],\n      graphics: [\n        ({ ctx }) => {\n          ctx.strokeStyle = '#fff';\n          ctx.translate(128, 32);\n          for (let i = 0; i < 32; i += 1) {\n            const x = Math.random() * 50;\n            const y = Math.random() * 50;\n            ctx.beginPath();\n            ctx.moveTo(-x, 50 - y);\n            ctx.lineTo(x, y);\n            ctx.stroke();\n          }\n        },\n      ],\n      styles: {\n        button: {\n          background: '#393',\n        },\n      },\n    });\n    sign.position.set(0, 0, -2.5);\n    this.add(sign);\n    this.intersects.push(...sign.intersects);\n  }\n}\n\nexport default Menu;\n","import {\n  NearestFilter,\n  Object3D,\n  TextureLoader,\n  Vector3,\n} from 'three';\nimport {\n  Scene,\n  Floor,\n  Voxels,\n} from 'vrengine';\nimport {\n  Ball,\n  Sign,\n  Walls,\n} from '@/meshes';\nimport VoxelsTexture from '@/textures/voxels.png';\nimport DarkAmbient from '@/sounds/dark.ogg';\n\nclass Level1 extends Scene {\n  constructor(args) {\n    super(args);\n    const { engine } = args;\n\n    engine.setAmbientSounds([DarkAmbient]);\n    engine.setBackgroundColor(0x330000);\n\n    // Spawn some huge walls\n    const walls = new Walls();\n    this.add(walls);\n\n    // Spawn a ground plane\n    const ground = new Floor({\n      color: 0x662222,\n      width: 16,\n      height: 32,\n    });\n    this.add(ground);\n    this.intersects.push(ground);\n\n    // Spawn a disco ball\n    const ball = new Ball({\n      listener: engine.listener,\n      color: 0x339933,\n      position: { x: 0, y: 1.25, z: -2.5 },\n    });\n    this.add(ball);\n    this.intersects.push(ball);\n\n    // Spawn some floating voxels\n    const voxelsContainer = new Object3D();\n    {\n      const size = 16;\n      const origin = new Vector3(size * 0.5, size * 0.5, size * 0.5);\n      const aux = new Vector3();\n      const texture = new TextureLoader().load(VoxelsTexture);\n      texture.repeat.set(1 / 8, 1);\n      texture.magFilter = NearestFilter;\n      texture.minFilter = NearestFilter;\n      this.voxelsTexture = texture;\n      const voxels = new Voxels({\n        generator: ({ x, y, z }) => {\n          const d = aux.set(x, y, z).distanceTo(origin);\n          return (d > size * 0.6 && Math.random() >= 0.2) || Math.random() >= 0.9 ? (\n            ((Math.floor(Math.random() * 8) + 1) << 24)\n            | (((Math.random() * 0xFF) & 0xFF) << 16)\n            | (((Math.random() * 0xFF) & 0xFF) << 8)\n            | ((Math.random() * 0xFF) & 0xFF)\n          ) : (\n            0x00\n          );\n        },\n        size,\n        texture,\n      });\n      voxelsContainer.rotation.order = 'YXZ';\n      voxelsContainer.rotation.x = Math.PI * 0.25;\n      voxelsContainer.rotation.z = Math.PI * 0.25;\n      voxels.onBeforeRender = ({ animation: { delta, time } }) => {\n        voxelsContainer.position.y = 1.25 + (Math.sin(time * 2) * 0.02);\n        voxelsContainer.rotation.y += delta * 0.25;\n      };\n      voxels.position.set(-8, -8, -8);\n      voxelsContainer.scale.set(0.02, 0.02, 0.02);\n      voxelsContainer.position.set(-1.5, 1.25, -2.5);\n      voxelsContainer.add(voxels);\n      this.add(voxelsContainer);\n      this.intersects.push(voxels);\n    }\n\n    // Spawn a sign\n    const sign = new Sign({\n      buttons: [\n        {\n          label: 'Back to Menu',\n          x: 128 - 110,\n          y: 128 - 25,\n          width: 220,\n          height: 50,\n          onPointer: ({ isPrimary }) => {\n            if (isPrimary) engine.router.goTo('/');\n          },\n        },\n      ],\n      graphics: [\n        ({ ctx }) => {\n          for (let i = 0; i < 128; i += 1) {\n            const x = Math.random() * 256;\n            const y = Math.random() * 256;\n            const l = (Math.random() * 0.3 + 0.5) * 0x100;\n            ctx.fillStyle = `rgba(${l}, ${l}, ${l}, .5)`;\n            ctx.beginPath();\n            ctx.arc(x, y, Math.random() * 5 + 1, 0, Math.PI * 2);\n            ctx.fill();\n          }\n        },\n      ],\n      styles: {\n        button: {\n          background: '#393',\n        },\n      },\n    });\n    sign.position.set(2.5, 0, -2.5);\n    sign.lookAt(0, 1.5, 0);\n    this.add(sign);\n    this.intersects.push(...sign.intersects);\n  }\n\n  dispose() {\n    super.dispose();\n    this.voxelsTexture.dispose();\n  }\n}\n\nexport default Level1;\n","import Menu from './menu';\nimport Level1 from './level1';\nimport Level2 from './level2';\n\nexport default [\n  {\n    path: '/',\n    scene: Menu,\n  },\n  {\n    path: '/play',\n    scene: Level1,\n  },\n  {\n    path: '/play/2',\n    scene: Level2,\n  },\n];\n","import {\n  Mesh,\n  Vector3,\n} from 'three';\nimport {\n  Scene,\n  Heightmap,\n  Starfield,\n  Water,\n} from 'vrengine';\nimport {\n  Plant,\n  Sign,\n  Track,\n  Train,\n  Tree,\n} from '@/meshes';\nimport Ambient from '@/sounds/sea.ogg';\nimport TrainAmbient from '@/sounds/train.ogg';\n\nclass Level2 extends Scene {\n  constructor(args) {\n    super(args);\n    const { engine } = args;\n\n    engine.setAmbientSounds([\n      Ambient,\n      { file: TrainAmbient, volume: 0.15 },\n    ]);\n    engine.setBackgroundColor(0x666699);\n    // engine.camera.debug.active = true;\n\n    // Spawn a voxel train\n    const train = new Train();\n    this.add(train);\n    this.intersects.push(...train.intersects);\n\n    // Spawn some heightmaps\n    const aux = new Vector3();\n    const origin = new Vector3(63.5, 0, 63.5);\n    const radius = Math.sqrt(64 * 64 + 64 * 64);\n    const ground = new Heightmap({\n      color: 0x550033,\n      map: [...Array(128)].map((v, z) => ([...Array(128)].map((v, x) => {\n        const d = aux.set(x, 0, z).distanceTo(origin);\n        return (\n          Math.random() * 0.5\n          + (Math.cos(x * 0.25) + Math.sin(z * 0.5)) * (1 / 3)\n          + (radius - (d * 0.1))\n        );\n      }))),\n    });\n    const heightmaps = [...Array(3)].map((v, i) => {\n      const mesh = new Mesh(\n        ground.geometry,\n        ground.material\n      );\n      mesh.position.y -= ground.maxDepth + 3;\n      mesh.position.z = 127 - 127 * i;\n      // Spawn a voxel track\n      const track = new Track();\n      track.position.y += ground.maxDepth;\n      mesh.add(track);\n      // Spawn some voxel trees\n      for (let i = 0; i < 16; i += 1) {\n        const tree = new Tree();\n        tree.position.add(\n          aux\n            .set(\n              (Math.random() * 0.5 + 0.5) * (Math.random() >= 0.5 ? 1 : -1),\n              0,\n              Math.random() * 2 - 1\n            )\n            .normalize()\n            .multiplyScalar(16 + Math.random() * 32)\n        );\n        tree.position.y = ground.getFloorY({ x: aux.x, z: aux.z }) - 0.5;\n        mesh.add(tree);\n      }\n      // Spawn some voxel plants\n      for (let i = 0; i < 16; i += 1) {\n        const plant = new Plant();\n        plant.position.add(\n          aux\n            .set(\n              (Math.random() * 0.5 + 0.5) * (Math.random() >= 0.5 ? 1 : -1),\n              0,\n              Math.random() * 2 - 1\n            )\n            .normalize()\n            .multiplyScalar(16 + Math.random() * 40)\n        );\n        plant.position.y = ground.getFloorY({ x: aux.x, z: aux.z }) - 0.05;\n        mesh.add(plant);\n      }\n      this.add(mesh);\n      return mesh;\n    });\n\n    // Spawn some water chunks\n    const water = new Water();\n    water.position.set(0, -8.75, 0);\n    this.add(water);\n    this.animations.push(Water.onAnimationTick);\n\n    // Animate the scenery\n    this.animations.push(({ delta }) => {\n      const step = delta * 8;\n      heightmaps.forEach((mesh) => {\n        mesh.position.z += step;\n        if (mesh.position.z > 190) {\n          mesh.position.z -= 127 * heightmaps.length;\n        }\n      });\n      water.position.z = (water.position.z + step) % 96;\n    });\n\n    // Spawn a starfield\n    const stars = new Starfield();\n    this.add(stars);\n\n    // Spawn a sign\n    const sign = new Sign({\n      buttons: [\n        {\n          label: 'Back to Menu',\n          x: 128 - 110,\n          y: 128 - 25,\n          width: 220,\n          height: 50,\n          onPointer: ({ isPrimary }) => {\n            if (isPrimary) engine.router.goTo('/');\n          },\n        },\n      ],\n      graphics: [\n        ({ ctx }) => {\n          for (let i = 0; i < 128; i += 1) {\n            const x = Math.random() * 256;\n            const y = Math.random() * 256;\n            const l = (Math.random() * 0.3 + 0.5) * 0x100;\n            ctx.fillStyle = `rgba(${l}, ${l}, ${l}, .5)`;\n            ctx.beginPath();\n            ctx.arc(x, y, Math.random() * 5 + 1, 0, Math.PI * 2);\n            ctx.fill();\n          }\n        },\n      ],\n      styles: {\n        button: {\n          background: '#393',\n        },\n      },\n    });\n    sign.position.set(0, 0, -6.5);\n    this.add(sign);\n    this.intersects.push(...sign.intersects);\n  }\n}\n\nexport default Level2;\n","import VREngine from 'vrengine';\nimport scenes from '@/scenes';\n\nVREngine({\n  basename: __BASENAME__,\n  mount: document.getElementById('mount'),\n  scenes,\n});\n","module.exports = __webpack_public_path__ + \"assets/3fd3615c66c216135d0ea47de53e91c6.ogg\";"],"sourceRoot":""}